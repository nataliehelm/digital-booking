{
	"info": {
		"_postman_id": "187f0c99-92fc-425e-bcc5-ff619ff65e73",
		"name": "Digital Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Categories",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First category should have id 1 and title Hoteles\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstCategory = jsonData.data[0]",
									"    pm.expect(firstCategory.id).to.eql(1);",
									"    pm.expect(firstCategory.title).to.eql('Hoteles');",
									"});",
									"",
									"pm.test(\"Response should have more than 1 result\", function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(categories.length).to.be.gt(1);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties: {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"title\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"createdAt\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"updatedAt\": {",
									"                \"type\": \"string\"",
									"            },",
									"        }",
									"    }]",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/categories/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Category should have id 1 and title Hoteles\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstCategory = jsonData.data",
									"    pm.expect(firstCategory.id).to.eql(1);",
									"    pm.expect(firstCategory.title).to.eql('Hoteles');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/categories/1432",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								"1432"
							]
						}
					},
					"response": []
				},
				{
					"name": "findById nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/categories/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "save",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titlea\": \"Categoria 1\",\n  \"descriptiona\": \"descripcion categoria 1\",\n  \"image_url\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/categories/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "save Body Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Categoria 1\",\n  \"image_url\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/categories/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"image_url\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"            \"type\": \"null\"",
									"        },",
									"        \"updatedAt\": {",
									"            \"type\": \"null\"",
									"        },",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema)).to.be.true;",
									"});",
									"",
									"pm.test('Response title should be \"nueva Categoria 1\"', function () {",
									"    const jsonData = pm.response.json();",
									"    const category = jsonData.data",
									"    console.log(category.title)",
									"    pm.expect(category.title).to.eql('nueva Categoria 1');",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Categoria 1\",\n  \"description\": \"nueva descripcion categoria 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/categories/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Categoria 1\",\n  \"description\": \"nueva descripcion categoria 1\",\n  \"image_url\": \"string1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/categories/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/categories/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/categories/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"categories",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locations",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Category should have id 1 and title Hoteles\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstCategory = jsonData.data",
									"    pm.expect(firstCategory.id).to.eql(1);",
									"    pm.expect(firstCategory.title).to.eql('Hoteles');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/locations/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"locations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Category should have id 2 and name Provincia de San Luis\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstCategory = jsonData.data",
									"    console.log(firstCategory)",
									"    pm.expect(firstCategory.id).to.eql(2);",
									"    pm.expect(firstCategory.name).to.eql('Provincia de San Luis');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/locations/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"locations",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "findById nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/locations/-2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"locations",
								"-2"
							]
						}
					},
					"response": []
				},
				{
					"name": "save",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"iso_id\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"iso_name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"country\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"created_at\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"updated_at\": {",
									"            \"type\": \"string\"",
									"        },",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Bogotá Distrito Capital\",\n    \"iso_id\": \"CO-B\",\n    \"short_name\": \"Bogotá\",\n    \"category\": \"Provincia\",\n    \"iso_name\": \"Bogotá D.C.\",\n    \"country\": \"Colombia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/locations/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"locations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response title should be \"Provincia de Misiones\"', function () {",
									"    const jsonData = pm.response.json();",
									"    const category = jsonData.data",
									"    console.log(category.title)",
									"    pm.expect(category.name).to.eql('Provincia de Misiones');",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Provincia de Misionses\",\n    \"iso_id\": \"AR-N\",\n    \"short_name\": \"Misiones\",\n    \"category\": \"Provincia\",\n    \"iso_name\": \"Misiones\",\n    \"country\": \"Argentina\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/locations/25",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"locations",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/locations/25",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"locations",
								"25"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Features",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First element should have id 1 and title Hoteles\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data[0]",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.name).to.eql('Cocina');",
									"});",
									"",
									"pm.test(\"Response should have more than 1 result\", function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(elements.length).to.be.gt(1);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties: {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"icon\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }]",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/features/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Element should have id 1 and name Cocina\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.name).to.eql('Cocina');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"icon\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/features/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "findById nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/features/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "save",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"icon\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Feature 1\",\n  \"icon\": \"feature-feature\",\n  \"image_url\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/features/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "save Body Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Feature 1\",\n  \"image_url\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/features/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"icon\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test('Response name should be \"nueva Feature 1\"', function () {",
									"    const jsonData = pm.response.json();",
									"    const element = jsonData.data",
									"    pm.expect(element.name).to.eql('nueva Feature 1');",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"nueva Feature 1\",\n  \"icon\": \"fe-feature\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/features/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Categoria 1\",\n  \"description\": \"nueva descripcion categoria 1\",\n  \"image_url\": \"string1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/features/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/features/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/features/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"features",
								"-1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Images",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First element should have id 1 and title Hermitage Hotel 1\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data[0]",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.title).to.eql('Hermitage Hotel 1');",
									"});",
									"",
									"pm.test(\"Response should have more than 1 result\", function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(elements.length).to.be.gt(1);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties: {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"title\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"url\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }]",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/images/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Element should have id 1 and title Hermitage Hotel 1\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.title).to.eql('Hermitage Hotel 1');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"url\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/images/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "findById nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/images/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "save",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"url\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Image 1\",\n  \"url\": \"localhost:8080/mi_logo\",\n  \"product_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/images/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "save Body Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Image 1\",\n  \"image_url\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/images/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"url\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test('Response title should be \"nueva Image 1\"', function () {",
									"    const jsonData = pm.response.json();",
									"    const category = jsonData.data",
									"    pm.expect(category.title).to.eql('nueva Image 1');",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Image 1\",\n  \"url\": \"localhost:8081/mi_logo\",\n  \"product_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/images/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Categoria 1\",\n  \"description\": \"nueva descripcion categoria 1\",\n  \"image_url\": \"string1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/images/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/images/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/images/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"images",
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Policies",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First element should have id 1 and title Normas de la casa\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data[0]",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.title).to.eql('Normas de la casa');",
									"});",
									"",
									"pm.test(\"Response should have more than 1 result\", function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(elements.length).to.be.gt(1);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties: {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"title\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"subPolicies\": {",
									"                \"type\": \"array\",",
									"                \"items\": [{",
									"                    type: \"object\",",
									"                    properties: {",
									"                        \"id\": \"integer\",",
									"                        \"description\": \"string\"",
									"                    }",
									"                }]",
									"            }",
									"        }",
									"    }]",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/policies/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Element should have id 1 and title Normas de la casa\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.title).to.eql('Normas de la casa');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"subPolicies\": {",
									"            \"type\": \"array\",",
									"            \"items\": [{",
									"                type: \"object\",",
									"                properties: {",
									"                    \"id\": \"integer\",",
									"                    \"description\": \"string\"",
									"                }",
									"            }]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/policies/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "findById nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/policies/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "save",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"subPolicies\": {",
									"            \"type\": \"array\",",
									"            \"items\": [{",
									"                type: \"object\",",
									"                properties: {",
									"                    \"id\": \"integer\",",
									"                    \"description\": \"string\"",
									"                }",
									"            }]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Politica nueva\",\n  \"subPolicyIds\": [1,2,3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/policies/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "save Body Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Image 1\",\n  \"image_url\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/policies/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"subPolicies\": {",
									"            \"type\": \"array\",",
									"            \"items\": [{",
									"                type: \"object\",",
									"                properties: {",
									"                    \"id\": \"integer\",",
									"                    \"description\": \"string\"",
									"                }",
									"            }]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test('Response title should be \"Politica nueva\" and subPolicies should have 1 length', function () {",
									"    const jsonData = pm.response.json();",
									"    const category = jsonData.data",
									"    pm.expect(category.title).to.eql('Politica nueva');",
									"    pm.expect(category.subPolicies.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Politica nueva\",\n  \"subPolicyIds\": [1]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/policies/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Categoria 1\",\n  \"description\": \"nueva descripcion categoria 1\",\n  \"image_url\": \"string1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/policies/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/policies/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/policies/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"policies",
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SubPolicies",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First element should have id 1 and description Check-out: 10:00\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data[0]",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.description).to.eql('Check-out: 10:00');",
									"});",
									"",
									"pm.test(\"Response should have more than 1 result\", function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(elements.length).to.be.gt(1);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties: {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }]",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/subPolicies/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Element should have id 1 and description Check-out: 10:00\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.description).to.eql('Check-out: 10:00');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/subPolicies/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "findById nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/subPolicies/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "save",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"subPolicies\": {",
									"            \"type\": \"array\",",
									"            \"items\": [{",
									"                type: \"object\",",
									"                properties: {",
									"                    \"id\": \"integer\",",
									"                    \"description\": \"string\"",
									"                }",
									"            }]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Nueva Subpolitica\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/subPolicies/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "save Body Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/subPolicies/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const categories = jsonData.data",
									"    pm.expect(tv4.validate(categories, schema, false, true)).to.be.true;",
									"});",
									"",
									"pm.test('Response description should be \"Nueva Sub-politica\"', function () {",
									"    const jsonData = pm.response.json();",
									"    const category = jsonData.data",
									"    pm.expect(category.description).to.eql('Nueva Sub-politica');",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Nueva Sub-politica\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/subPolicies/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Categoria 1\",\n  \"description\": \"nueva descripcion categoria 1\",\n  \"image_url\": \"string1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/subPolicies/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/subPolicies/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/subPolicies/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subPolicies",
								"8"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "findAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"First element should have id 1 and name Hermitage Hotel\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data[0]",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.name).to.eql('Hermitage Hotel');",
									"});",
									"",
									"pm.test(\"Response should have 1 result\", function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(elements.length).to.eql(1);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties: {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"distance_to_nearest_tourist_site\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"ranking\": {",
									"                \"type\": \"number\"",
									"            },",
									"            \"score\": {",
									"                \"type\": \"number\"",
									"            },",
									"            \"description_title\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"coordinates\": {",
									"                \"type\": \"array\"",
									"            },",
									"            \"category\": {",
									"                \"type\": \"object\"",
									"            },",
									"            \"location\": {",
									"                \"type\": \"object\"",
									"            },",
									"            \"features\": {",
									"                \"type\": \"array\"",
									"            },",
									"            \"policies\": {",
									"                \"type\": \"array\"",
									"            },",
									"            \"images\": {",
									"                \"type\": \"array\"",
									"            },",
									"        }",
									"    }]",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/products/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Element should have id 1 and name Hermitage Hotel\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstElement = jsonData.data",
									"    pm.expect(firstElement.id).to.eql(1);",
									"    pm.expect(firstElement.name).to.eql('Hermitage Hotel');",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"        properties: {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"name\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"distance_to_nearest_tourist_site\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"ranking\": {",
									"                \"type\": \"number\"",
									"            },",
									"            \"score\": {",
									"                \"type\": \"number\"",
									"            },",
									"            \"description_title\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"coordinates\": {",
									"                \"type\": \"array\"",
									"            },",
									"            \"category\": {",
									"                \"type\": \"object\"",
									"            },",
									"            \"location\": {",
									"                \"type\": \"object\"",
									"            },",
									"            \"features\": {",
									"                \"type\": \"array\"",
									"            },",
									"            \"policies\": {",
									"                \"type\": \"array\"",
									"            },",
									"            \"images\": {",
									"                \"type\": \"array\"",
									"            },",
									"        }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema, false)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/products/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "findById nonexistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/products/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "save",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"distance_to_nearest_tourist_site\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"ranking\": {",
									"            \"type\": \"number\"",
									"        },",
									"        \"score\": {",
									"            \"type\": \"number\"",
									"        },",
									"        \"description_title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"coordinates\": {",
									"            \"type\": \"array\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\"",
									"        },",
									"        \"location\": {",
									"            \"type\": \"object\"",
									"        },",
									"        \"features\": {",
									"            \"type\": \"array\"",
									"        },",
									"        \"policies\": {",
									"            \"type\": \"array\"",
									"        },",
									"        \"images\": {",
									"            \"type\": \"null\"",
									"        },",
									"    }",
									"};",
									"",
									"pm.test('Response schema type nodes verification', function () {",
									"    const jsonData = pm.response.json();",
									"    const elements = jsonData.data",
									"    pm.expect(tv4.validate(elements, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Chalten Suites Hotel\",\n    \"distance_to_nearest_tourist_site\": \"A 100 m de la plaza principal\",\n    \"ranking\": 4.0,\n    \"score\": 9.0,\n    \"description_title\": \"Este hotel se encuentra en la mejor zona de El Chaltén y tiene un puntaje excelente por la ubicación.\",\n    \"description\": \"Este alojamiento se encuentra en El Chalten, a 100 metros de la plaza principal. Ofrece habitaciones acogedoras y elegantes y conexión wifi gratis. El Chalten Suites tiene una zona de desayunos amplia, con muchas ventanas y vistas al jardín y las montañas de los alrededores.\\n\\nEl Chalten Suites Hotel dispone de habitaciones con TV y minibar. El baño privado incluye ducha y secador de pelo. Todas tienen escritorio.\\n\\nEl Chalten Suite cuenta con mostrador de información turística y consigna de equipaje.\\n\\nEl alojamiento cuenta con estacionamiento gratuito. Está a 200 metros del río Fitz Roy y a 210 km del aeropuerto de El Calafate.\\n\\nNuestros clientes dicen que esta parte de El Chaltén es su favorita, según los comentarios independientes.\\n\\nA las parejas les gusta la ubicación. Le pusieron un puntaje de 9,6 para un viaje de a dos.\",\n    \"coordinates\": [\n        -49.330412,\n        -72.888143\n    ],\n    \"categoryId\": 1,\n    \"locationId\": 5,\n    \"featureIds\": [],\n    \"policiyIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/products/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "save Body Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/products/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response features length should be 2 and policies length should be 3', function () {",
									"    const jsonData = pm.response.json();",
									"    const element = jsonData.data",
									"    pm.expect(element.features.length).to.eql(2);",
									"    pm.expect(element.policies.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Chalten Suites Hotel\",\n    \"distance_to_nearest_tourist_site\": \"A 100 m de la plaza principal\",\n    \"ranking\": 4.0,\n    \"score\": 9.0,\n    \"description_title\": \"Este hotel se encuentra en la mejor zona de El Chaltén y tiene un puntaje excelente por la ubicación.\",\n    \"description\": \"Este alojamiento se encuentra en El Chalten, a 100 metros de la plaza principal. Ofrece habitaciones acogedoras y elegantes y conexión wifi gratis. El Chalten Suites tiene una zona de desayunos amplia, con muchas ventanas y vistas al jardín y las montañas de los alrededores.\\n\\nEl Chalten Suites Hotel dispone de habitaciones con TV y minibar. El baño privado incluye ducha y secador de pelo. Todas tienen escritorio.\\n\\nEl Chalten Suite cuenta con mostrador de información turística y consigna de equipaje.\\n\\nEl alojamiento cuenta con estacionamiento gratuito. Está a 200 metros del río Fitz Roy y a 210 km del aeropuerto de El Calafate.\\n\\nNuestros clientes dicen que esta parte de El Chaltén es su favorita, según los comentarios independientes.\\n\\nA las parejas les gusta la ubicación. Le pusieron un puntaje de 9,6 para un viaje de a dos.\",\n    \"coordinates\": [\n        -49.330412,\n        -72.888143\n    ],\n    \"categoryId\": 1,\n    \"locationId\": 5,\n    \"featureIds\": [\n        4,\n        3\n    ],\n    \"policiyIds\": [\n        1,\n        2,\n        3\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/products/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "update Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"nueva Categoria 1\",\n  \"description\": \"nueva descripcion categoria 1\",\n  \"image_url\": \"string1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/products/-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    console.log(pm.response.code)",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/products/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// First check if id exists",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/products/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}